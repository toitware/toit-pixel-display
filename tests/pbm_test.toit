// Copyright (C) 2020 Toitware ApS. All rights reserved.
// Use of this source code is governed by an MIT-style license that can be
// found in the LICENSE file.

import expect show *
import pixel_display.two_color show *

toit_logo := ByteArray 329: [
  0x50, 0x34, 0x0a, 0x36, 0x32, 0x20, 0x34, 0x30, 0x0a,
  0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38,
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc,
  0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfc,
  0x1f, 0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0,
  0x01, 0xff, 0xf8, 0x00, 0x00, 0x7f, 0xfe, 0x00,
  0x00, 0x0f, 0xff, 0xc0, 0x0f, 0xff, 0xc0, 0x00,
  0x00, 0x01, 0xff, 0xfc, 0xff, 0xfe, 0x00, 0x00,
  0x00, 0x00, 0x0f, 0xff, 0xff, 0xc0, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3c, 0xf0, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x38, 0x70, 0x00, 0x00, 0x08,
  0xe0, 0x00, 0x00, 0x78, 0x78, 0x00, 0x00, 0x1c,
  0xf0, 0x00, 0x00, 0xf0, 0x3c, 0x00, 0x00, 0x3c,
  0x78, 0x00, 0x00, 0xe0, 0x1c, 0x00, 0x00, 0x78,
  0x3c, 0x00, 0x01, 0xe0, 0x1e, 0x00, 0x00, 0xf0,
  0x1e, 0x00, 0x03, 0xc0, 0x0f, 0x00, 0x01, 0xe0,
  0x0f, 0x00, 0x03, 0xc0, 0x0f, 0x00, 0x03, 0xc0,
  0x07, 0x00, 0x07, 0x80, 0x07, 0x80, 0x03, 0x80,
  0x07, 0x80, 0x07, 0x00, 0x03, 0x80, 0x07, 0x80,
  0x03, 0xc0, 0x0f, 0x00, 0x03, 0xc0, 0x0f, 0x00,
  0x01, 0xe0, 0x1e, 0x00, 0x01, 0xe0, 0x1e, 0x00,
  0x00, 0xf0, 0x3c, 0x00, 0x00, 0xf0, 0x3c, 0x00,
  0x00, 0x7c, 0x7c, 0x00, 0x00, 0xf8, 0xf8, 0x00,
  0x00, 0x3f, 0xf8, 0x00, 0x00, 0x7f, 0xf0, 0x00,
  0x00, 0x1f, 0xf0, 0x00, 0x00, 0x3f, 0xe0, 0x00,
  0x00, 0x07, 0xc0, 0x00, 0x00, 0x0f, 0x80, 0x00
  ][it]

main:
  test_parse_magic_number
  test_parse_whitespace
  test_parse_multiple_whitespace
  test_parse_toit_logo

test_parse_magic_number:
  incorrect_magic_number := ByteArray 2: ['O','4'][it]
  expect_throw "INVALID PBM": (PbmParser_ incorrect_magic_number).parse_magic_number_

  incorrect_magic_number = ByteArray 2: ['P','3'][it]
  expect_throw "INVALID PBM": (PbmParser_ incorrect_magic_number).parse_magic_number_

  correct_magic_number := ByteArray 2: ['P','4'][it]
  parser := PbmParser_ correct_magic_number
  expect_no_throw: parser.parse_magic_number_
  expect_equals 2 parser.next_

test_parse_whitespace char:
  expect_no_throw:
    parser := PbmParser_ (ByteArray 1: char)
    parser.parse_whitespace_

test_parse_whitespace:
  test_parse_whitespace '\t'
  test_parse_whitespace '\v'
  test_parse_whitespace ' '
  test_parse_whitespace '\n'
  test_parse_whitespace '\r'
  test_parse_whitespace '\f'
  expect_throw "INVALID PBM": (PbmParser_ (ByteArray 1: 'A')).parse_whitespace_

test_parse_multiple_whitespace:
  parser := PbmParser_ (ByteArray 6: ['\t', '\v', ' ', '\n', '\r', '\f'][it])
  expect_no_throw: parser.parse_multiple_whitespace_
  expect_equals 6 parser.next_

  parser = PbmParser_ (ByteArray 6: ['\t', '\v', ' ', '\n', '\r', '\f'][it])
  expect_no_throw: parser.parse_multiple_whitespace_ --at_least_one
  expect_equals 6 parser.next_

  parser = PbmParser_ (ByteArray 1: ['\t'][it])
  expect_no_throw: parser.parse_multiple_whitespace_ --at_least_one
  expect_equals 1 parser.next_

  parser = PbmParser_ (ByteArray 7: ['\t', '\v', ' ', 'A', '\n', '\r', '\f'][it])
  expect_no_throw: parser.parse_multiple_whitespace_
  expect_equals 3 parser.next_

  parser = PbmParser_ (ByteArray 6: ['A', '\v', ' ', '\n', '\r', '\f'][it])
  expect_no_throw: parser.parse_multiple_whitespace_
  expect_equals 0 parser.next_

  parser = PbmParser_ (ByteArray 6: ['A', '\v', ' ', '\n', '\r', '\f'][it])
  expect_throw "INVALID PBM": parser.parse_multiple_whitespace_ --at_least_one

test_parse_number:
  parser := PbmParser_ (ByteArray 2: ['1', ' '][it])
  number := parser.parse_number_
  expect_equals 1 number

  parser = PbmParser_ (ByteArray 3: ['1', '2', ' '][it])
  number = parser.parse_number_
  expect_equals 12 number

  parser = PbmParser_ (ByteArray 3: ['1', 'A', ' '][it])
  expect_throw "INVALID PBM": number = parser.parse_number_

  parser = PbmParser_ (ByteArray 2: ['1', '2'][it])
  expect_throw "INVALID PBM": number = parser.parse_number_

test_parse_toit_logo:
  logo_width ::= 62
  logo_height ::= 40
  pbm := null
  expect_no_throw: pbm = Pbm.parse toit_logo
  expect_equals logo_width pbm.width
  expect_equals logo_height pbm.height
  expect_bytes_equal
    pbm.row 0
    ByteArray 8: [0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38][it]
  expect_bytes_equal
    pbm.row logo_height - 1
    ByteArray 8: [0x00, 0x07, 0xc0, 0x00, 0x00, 0x0f, 0x80, 0x00][it]
